{
  "hash": "1d1d2839fde1e28b2ccd3996820a7cb0",
  "result": {
    "markdown": "---\ntitle: \"Tipos de datos simples\"\nsubtitle: \"Curso básico de R\"\nauthor: \"Alfredo Sánchez Alberca &nbsp; [{{< fa envelope >}}](mailto:asalber@ceu.es) [{{< fa brands twitter >}}](https://twitter.com/aprendeconalf) [{{< fa home >}}](https://aprendeconalf.es)\"\ninstitute: Universidad CEU San Pablo\nlogo: img/logos/sticker.png\n# title-slide-attributes:\n#     #data-background-color: black\n#     data-background-image: img/prompt-julia.png\n#     data-background-size: contain\nlang: es\nfig-align: center\nnavigation-mode: vertical\nslide-level: 3\n---\n\n\n## Tipos de datos simples predefinidos\n\n- `numeric`: Es el tipo de los números. Secuencia de dígitos (pueden incluir el - para negativos y el punto como separador de decimales) que representan números.  Por ejemplo, `1`, `-2.0`, `3.1415` o `4.5e3`.  \n\n  - `integer`: Es el tipo de los números enteros.\n  \n  - `double`: Es el tipo de los números reales. \n\n- `character`: Es el tipo de las cadenas de caracteres. Secuencia de caracteres alfanuméricos que representan texto. Se escriben entre comillas simples o dobles. Por ejemplo `\"Hola\"` o `'Hola'`.  \n\n- `logical`: Es el tipo de los booleanos. Puede tomar cualquiera de los dos valores lógicos `TRUE` (verdadero) o `FALSE` (falso). También se pueden abreviar como `T` o `F`.  \n\n----\n\n- `NA`: Se utiliza para representar datos desconocidos o perdidos.\n\n- `NULL`: Se utiliza para representar la ausencia de datos. La principal diferencia con `NA` es que `NULL` aparece cuando se intenta acceder a un dato que no existe, mientras que `NA` se utiliza para representar explícitamente datos perdidos en un estudio. \n\n---- \n\n## Identificación del tipo de dato\n\n- `class(x)`: Devuelve el tipo del dato `x`.\n\n:::{#exm-tipos-datos}\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-1_eb23dbd80af6c9460a4a393771fd00fd'}\n\n```{.r .cell-code}\nclass(3.1415)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(\"Hola\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NULL\"\n```\n:::\n:::\n\n:::\n\n----\n\n- `is.numeric(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `numeric`. \n- `is.double(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `double`.\n- `is.integer(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `integer`. \n- `is.character(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `character`. \n- `is.logical(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `logical`. \n- `is.na(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `NA`. \n- `is.null(x)`: Devuelve el booleano `TRUE` si `x` es del tipo `NULL`.\n\n:::{#exm-tipos-datos-2}\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-2_b8a6fdf55f6c33f9aa676420eeafbd89'}\n\n```{.r .cell-code}\nis.double(3.1415)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.character(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n:::\n\n## Conversión de tipos\n\n- `as.numeric(x)`: Convierte el dato de `x` al tipo `numeric` siempre que sea posible o tenga sentido la conversión. El valor lógico `TRUE` se convierte en 1 y el `FALSE` en 0.\n- `as.integer(x)`: Convierte el dato de `x` al tipo `integer` siempre que sea posible o tenga sentido la conversión.\n- `as.character(x)`: Convierte el tipo de dato de `x` al tipo `character` simplemente añadiendo comillas.\n- `as.logical(x)`: Convierte el tipo de dato de `x` al tipo lógico. Para datos numéricos, el 0 se convierte en `FALSE` y cualquier otro número en `TRUE`. Para cadenas se obtiene `NA` excepto para las cadenas `\"TRUE\"` y `\"true\"` que se convierten a `TRUE` y las cadenas `\"FALSE\"` y `\"false\"` que se convierten a `FALSE`.\n\nEl tipo `NA` no se puede convertir a ningún otro tipo pues representa la ausencia del dato. Lo mismo ocurre con `NULL`.\n\n## Operaciones con números\n\n- Operaciones aritméticas\n- Operaciones relacionales\n- Funciones y constantes numéricas\n\n### Operadores aritméticos\n\n- `x + y`: Devuelve la suma de `x` e `y`.\n- `x - y`: Devuelve la resta de `x` e `y`. \n- `x * y`: Devuelve el producto de `x` e `y`.\n- `x / y`: Devuelve el cociente de `x` e `y`.  \n- `x %% y`: Devuelve el resto de la división entera de `x` e `y`.  \n- `x ^ y`: Devuelve la potencia `x` elevado a `y`.\n\n---\n\n:::{#exm-operadores-aritmeticos}\nA continuación se muestran varios ejemplos de operaciones aritméticas.\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-3_2706dc12faf8414218f5b684a1b6be9a'}\n\n```{.r .cell-code}\n2 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n5 * -2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -10\n```\n:::\n\n```{.r .cell-code}\n5 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n\n```{.r .cell-code}\n1 / 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n\n```{.r .cell-code}\n5 %% 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n2 ^ 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n:::\n\n### Operadores relacionales \n\nComparan dos números y devuelven un valor lógico.\n\n- `x == y`: Devuelve `TRUE` si el número `x` es igual que el número `y`, y `FALSE` en caso contrario.\n- `x > y`: Devuelve `TRUE` si el número `x` es mayor que el número `y`, y `FALSE` en caso contrario.\n- `x < y`: Devuelve `TRUE` si el número `x` es menor que el número `y`, y `FALSE` en caso contrario.\n- `x >= y`: Devuelve `TRUE` si el número `x` es mayor o igual que el número `y`, y `FALSE` en caso contrario.\n- `x <= y`: Devuelve `TRUE` si el número `x` es menor o igual a que el número `y,` y `FALSE` en caso contrario.\n- `x != y`: Devuelve `TRUE` si el número `x` es distinto del número `y`, y `FALSE` en caso contrario.\n\n---\n\n:::{#exm-operadores-relacionales}\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-4_0df79ece216f2f864e5c5f7da2f57459'}\n\n```{.r .cell-code}\n3 == 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3.1 <= 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n4 > 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n-1 != 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 %% 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n2 ^ 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n(2 + 3) ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n:::\n\n---\n\n### Funciones y constantes numéricas\n\n- `pi`: Devuelve el número $\\pi$.\n- `sqrt(x)`: Devuelve la raíz cuadrada de `x`.\n- `abs(x)`: Devuelve el valor absoluto de `x`.\n- `round(x, n)`: Devuelve el redondeo de `x` a `n` decimales.\n- `exp(x)`: Devuelve la exponencial de `x` ($e^x$).\n- `log(x)`: Devuelve el logaritmo neperiano de `x`.\n- `sin(x)`: Devuelve el seno del ángulo `x` en radianes.\n- `cos(x)`: Devuelve el coseno del ángulo `x` en radianes.\n- `tan(x)`: Devuelve la tangente del ángulo `x` en radianes.\n- `asin(x)`: Devuelve el arcoseno de `x`.\n- `acos(x)`: Devuelve el arcocoseno de `x`.\n- `atan(x)`: Devuelve el arcotangente de `x`.\n\n---\n\n:::{#exm-funciones-numéricas}\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-5_14fd3d4cf7258938756b31c77bae8fc7'}\n\n```{.r .cell-code}\nsqrt(9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nabs(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nround(1.7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nexp(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.718282\n```\n:::\n\n```{.r .cell-code}\nlog(exp(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ncos(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\nasin(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.570796\n```\n:::\n:::\n\n:::\n\n## Operaciones con cadenas\n\n- Funciones de cadenas\n- Operadores relacionales\n\n### Funciones de cadenas\n\n- `nchar(c)`: Devuelve el número de caracteres de la cadena.\n- `paste(x, y, ..., sep=s)`: Concatena las cadenas `x`, `y`, etc. separándolas por la cadena `s`. Por defecto la cadena de separación es un espacio en blanco.\n- `substr(c, start=i, stop=j)`: Devuelve la subcadena de la cadena `c` desde la posición `i` hasta la posición `j`. El primer carácter de una cadena ocupa la posición 1.\n- `tolower(c)`: Devuelve la cadena que resulta de convertir la cadena `c` a minúsculas.\n- `toupper(c)`: Devuelve la cadena que resulta de convertir la cadena `c` a mayúsculas.\n\n---\n\n:::{#exm-operaciones-cadenas}\nA continuación se muestran varios ejemplos de operaciones con cadenas de texto.\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-6_58c0d0a7018bc9bdbb8274128df825e1'}\n\n```{.r .cell-code}\nnchar(\"Me gusta R\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\npaste(\"Me\", \"gusta\", \"R\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Me gusta R\"\n```\n:::\n\n```{.r .cell-code}\npaste(\"Me\", \"gusta\", \"R\", sep = \"-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Me-gusta-R\"\n```\n:::\n\n```{.r .cell-code}\npaste(\"Me\", \"gusta\", \"R\", sep = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MegustaR\"\n```\n:::\n\n```{.r .cell-code}\nsubstr(\"Me gusta R\", 4, 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gusta\"\n```\n:::\n\n```{.r .cell-code}\ntolower(\"Me gusta R\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"me gusta r\"\n```\n:::\n\n```{.r .cell-code}\ntoupper(\"Me gusta R\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ME GUSTA R\"\n```\n:::\n:::\n\n:::\n\n### Operaciones relacionales de cadenas\n\n- `x == y` : Devuelve `TRUE` si la cadena `x` es igual que la cadena `y`, y `FALSE` en caso contrario.\n- `x > y` : Devuelve `TRUE` si la cadena `x` sucede a la cadena `y`, y `FALSE` en caso contrario.\n- `x < y` : Devuelve `TRUE` si la cadena `x` antecede a la cadena `y`, y `FALSE` en caso contrario.\n- `x >= y` : Devuelve `TRUE` si la cadena `x` sucede o es igual a la cadena `y`, y `FALSE` en caso contrario.\n- `x <= y` : Devuelve `TRUE` si la cadena `x` antecede o es igual a la cadena `y`, y `FALSE` en caso contrario.\n- `x != y` : Devuelve `TRUE` si la cadena `x` es distinta de la cadena `y`, y `FALSE` en caso contrario.\n\n<i class=\"fa fa-exclamation-triangle\" style=\"color:red;\"></i> _Utilizan el orden alfabético, las minúsculas van antes que las mayúsculas, y los números antes que las letras._\n\n---\n\n:::{#exm-operaciones-comparacion-cadenas}\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-7_55f513ebbd69dd4fdd867d104e164000'}\n\n```{.r .cell-code}\n\"R\" == \"R\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n\"R\" == \"r\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n\"uno\" < \"dos\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n\"A\" > \"a\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n\"\" < \"R\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n\n## Operaciones con datos lógicos o booleanos\n\nR asocia a `TRUE` el valor 1 y a `FALSE` el valor 0.\n\n- `x == y`: Devuelve `TRUE` si los booleanos `x` y `y` son iguales, y `FALSE` en caso contrario.\n- `x < y`: Devuelve `TRUE` si el booleano `x` es menor que el booleano `y`, y `FALSE` en caso contrario. \n- `x <= y`: Devuelve `TRUE` si el booleano `x` es menor o igual que el booleano `y`, y `FALSE` en caso contrario. \n- `x > y`: Devuelve `TRUE` si el booleano `x` es mayor que el booleano `y`, y `FALSE` en caso contrario. \n- `x >= y`: Devuelve `TRUE` si el booleano `x` es mayor o igual que el booleano `y`, y `FALSE` en caso contrario.\n- `x != y`: Devuelve `TRUE` si el booleano `x` es distinto que el booleano `y`, y `FALSE` en caso contrario.\n\n---\n\n- Negación `!b`: Devuelve `TRUE` si el booleano `b` es `FALSE`, y `FALSE` si es `TRUE`.\n- Conjunción `x & y`: Devuelve `TRUE` si los booleanos `x`, y `y` son `TRUE` y `FALSE` en caso contrario.\n- Disyunción `x | y`: Devuelve `TRUE` si alguno de los booleanos `x` o `y` son `TRUE`, y `FALSE` en caso contrario.\n\n### Tabla de verdad {-}\n\n|   `x`   |   `y`   | `!x` | `x & y` | `x | y` |\n| :-----: | :-----: | :-----: | :-------: | :------: |\n| `FALSE` | `FALSE` | `TRUE`  |  `FALSE`  | `FALSE`  |\n| `FALSE` | `TRUE`  | `TRUE`  |  `FALSE`  |  `TRUE`  |\n| `TRUE`  | `FALSE` | `FALSE` |  `FALSE`  |  `TRUE`  |\n| `TRUE`  | `TRUE`  | `FALSE` |  `TRUE`   |  `TRUE`  |\n\n---\n\n:::{#exm-operadores-logicos}\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-8_9b9ece70ab03d0b45c5ae195b6423a1a'}\n\n```{.r .cell-code}\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nFALSE | TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE | FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nTRUE & FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nTRUE & TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n\n## Variables \n\nUna variable es un identificador ligado a un valor.\n\n:::{.callout-note}\n## Reglas para nombrar variables\n\n- Comienzan siempre por una letra o punto, seguida de otras letras, números, puntos o guiones bajos. Si empieza por punto no puede seguirle un número.\n- No se pueden utilizarse palabras reservadas del lenguaje.\n:::\n\nLas variables no tienen asociado un tipo de dato y no es necesario declararlas antes de usarlas (tipado dinámico).\n\n### Asignación de un valor a una variable\n\n- `x <- y`: Asigna el valor `y` a la variable `x`.\n\nTambién se puede utilizar el operador `=`.\n\nSe puede crear una variable sin ningún valor asociado asignándole el valor `NULL`.\n\nUna vez definida una variable, puede utilizarse en cualquier expresión donde tenga sentido el valor que tiene asociado.\n\n---\n\n:::{#exm-variables}\nA continuación se muestran varios ejemplos de asignaciones de valores a variables.\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-9_37b5712e7b6b9e7a29b2f1633dfd3944'}\n\n```{.r .cell-code}\nx <- 3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ny <- x + 2\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n# Valor no definido\nx <- NULL\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\n# Eliminar y\nrm(y)\n# A partir de aquí, una llamada a y produce un error.\n```\n:::\n\n:::\n\n## Prioridad de los operadores\n\n|       |                        |\n| :---: | :--------------------: |\n|   1   | Funciones predefinidas |\n|   2   |       Potencias (`^`)   |     |\n|   3   | Productos y cocientes (`*`, `/`, `%%`) |\n|   4   |     Sumas y restas  (`+`, `-`)    |\n|   5    |  Operadores relacionales (`==`, `>`, `<`, `>=`, `<=`, `!=`) |\n| 6 | Negación (`!`) |\n| 7 | Conjunción (`&`) |\n| 8 | Disyunción (`|`) |\n| 9 | Asignación (`<-`) |\n\nSe puede saltar el orden de evaluación utilizando paréntesis `( )`.\n\n---\n\n:::{#exm-prioridad-evaluacion}\nA continuación se muestran varios ejemplos de evaluación de expresiones.\n\n::: {.cell hash='02-tipos-datos-simples_cache/revealjs/unnamed-chunk-10_663296cc86205108e1075750881260ca'}\n\n```{.r .cell-code}\n4 + 8 / 2 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n4 + (8 / 2) ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\n(4 + 8) / 2 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n(4 + 8 / 2) ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 64\n```\n:::\n\n```{.r .cell-code}\nx <- 2 \ny <- 3\nz <- ! x + 1 > y & y * 2  < x ^ 3\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}